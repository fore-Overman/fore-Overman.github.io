<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python的基础知识01</title>
    <link href="/2025/02/26/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/"/>
    <url>/2025/02/26/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/</url>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>‘’’<br>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。<br>等号（&#x3D;）用来给变量赋值。<br>等号（&#x3D;）运算符左边是一个变量名,等号（&#x3D;）运算符右边是存储在变量中的值。</p><p>Python 中有六个标准的数据类型：</p><ol><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ol><p>Python3 的六个标准数据类型中：<br>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p><p>Number（数字）<br>Python3 支持 int、float、bool、complex（复数）。</p><p>​    int（整数）<br>​    Python3 中的整数类型 int 可以表示任意大小的整数，可以用十进制、八进制、十六进制表示。</p><p>​    float（浮点数）<br>​    Python3 中的浮点数类型 float 可以表示小数。</p><p>​    bool（布尔值）<br>​    Python3 中的布尔值类型 bool 可以表示 True 或 False。</p><p>​    complex（复数）<br>​    Python3 中的复数类型 complex 可以表示复数，可以用 a + bj、a + bj、a + bj 的形式表示。</p><p>String（字符串）<br>Python3 中的字符串类型 str 可以表示任意文本，可以用单引号或双引号括起来的任意文本。</p><p>List（列表）<br>Python3 中的列表类型 list 可以表示一个有序的元素序列，可以用方括号 [] 或者 list() 函数创建。</p><p>Tuple（元组）<br>Python3 中的元组类型 tuple 可以表示一个有序可重复的元素序列，但是tuple一旦初始化就不能修改，可以用圆括号 () 或者 tuple() 函数创建。</p><p>Set（集合）<br>Python3 中的集合类型 set 可以表示一个无序的元素序列 唯一且无序，可以用花括号 {} 或者 set() 函数创建。</p><p>Dictionary（字典）<br>Python3 中的字典类型 dict 可以表示一个键值对的集合，可以用花括号 {} 或者 dict() 函数创建。</p><p>Python3 中的数据类型转换<br>Python3 中的数据类型转换可以使用 int()、float()、str() 等函数进行转换。</p><p>例如：</p><pre><code class="python">a = 10      # 整数b = 2.5     # 浮点数c = True    # 布尔值d = &#39;hello&#39;  # 字符串e = [1, 2, 3]  # 列表  类似java中的ArrayList   元素类型可以不同f = (4, 5, 6)  # 元组   类似java中的数组   元素类型不统一，可通过下标获取  f[0] = 4g = &#123;1, 2, 3&#125;  # 集合   相当于java中的seth = &#123;&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 25&#125;  # 字典   相当于java中的map print(int(a))  # 输出结果为：10print(float(b))  # 输出结果为：2.5print(str(c))  # 输出结果为：&#39;True&#39;print(list(e))  # 输出结果为：[1, 2, 3] print(tuple(f))  # 输出结果为：(4, 5, 6)print(set(g))  # 输出结果为：&#123;1, 2, 3&#125;print(dict(h))  # 输出结果为：&#123;&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 25&#125;&#39;&#39;&#39;#--------------------------------------------------------判断和循环----------------------------------------&#39;&#39;&#39;# 判断# if 条件:#     语句块# elif 条件:#     语句块# else:#     语句块nage = input(&quot;请输入你的年龄：&quot;)# 将字符串类型转为数字类型age = int(nage)if age &lt; 18:    print(&quot;您还未成年，不能抽烟！&quot;)elif age &gt;= 18 and age &lt;=60:    print(&quot;吸烟有害建康，请有节制的抽烟！&quot;)else:    print(&quot;您已经老了，不能抽烟！&quot;)# 循环# for 变量 in 序列:#     语句块# 1. 打印下面名字names = [&#39;张二&#39;, &#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;赵六&#39;]for name in names:    print(&quot;名字：&quot; + name)# 2. 计算1-10之间的和sum = 0for i in [1,2,3,4,5,6,7,8,9,10]:    sum += iprint(&quot;1-10之间的和为：&quot; + str(sum))# 3: python中 range()函数的用法 range(start, stop, step) start: 起始值 stop: 结束值 step: 步长  例如 range(1, 10, 2) 表示从1到10，步长为2sum2 = 0for i in range(0,100):    sum2 += iprint(&quot;结果如下：&quot; + str(sum2))# 循环# whilen = 10while n &lt; 20:    n = n + 1print(&quot;while的输出结果为：&quot; + str(n))#break 的使用 提前结束循环t = 10while t &gt; 0:    if t &lt; 4:        break    t = t -1    print(&quot;break循环结果：&quot; + str(t))#continue 的使用结束本次循环#在使用continue的时候需要注意结束这次循环的时候需要进行一下数据的处理，不然变量没有变化会死循环tt = 10while tt &gt; 0:    if tt == 4:        tt = tt -1        continue    tt = tt -1    print(&quot;continue循环结果：&quot; + str(tt))# + 号的使用 + 号可以用来拼接字符串、列表、元组数据类型# 字符串拼接str1 = &quot;hello&quot;str2 = &quot;world&quot;str3 = str1 + &quot; &quot; + str2print(str3)# * 号的使用 * 号可以用来重复字符串、列表、元组数据类型# 字符串重复str4 = &quot;hello&quot; * 3print(str4) # 输出结果为：hellohellohellotuple() 函数的使用 的作用 ： 用来将序列转换为元组list() 函数的使用 的作用 ： 用来将序列转换为列表set() 函数的使用 的作用 ： 用来将序列转换为集合del() 语句的使用 的作用 ： 删除变量len() 函数的使用 的作用 ： 计算序列的长度max() 函数的使用 的作用 ： 计算序列中的最大值min() 函数的使用 的作用 ： 计算序列中的最小值sorted() 函数的使用 的作用 ： 对序列进行排序sorted示例： sorted([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) 输出结果为：[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]进行降序输出：sorted(需要排序的列表，reverse=True)   reverse 代表降序输出。&#39;&#39;&#39;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/02/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/02/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/26/hello-world/"/>
    <url>/2025/02/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
