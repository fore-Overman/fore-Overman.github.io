<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python中的函数</title>
    <link href="/2025/02/27/Python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <url>/2025/02/27/Python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python中的函数"><a href="#Python中的函数" class="headerlink" title="Python中的函数"></a>Python中的函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>  在Python中，定义一个函数要使用def语句，</p><p>  依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>(<span class="hljs-params">x, y</span>):  <span class="hljs-comment"># 定义函数 my_function 接收两个参数 x 和 y  my_function 是函数名字</span><br>​    result = x + y   <span class="hljs-comment"># 计算两个数的和</span><br>​    <span class="hljs-keyword">return</span> result  <span class="hljs-comment"># 返回结果</span><br></code></pre></td></tr></table></figure><h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><p>  定义函数后，就可以在其他地方调用该函数，</p><p>  调用函数使用函数名加上括号，并传入函数参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-comment">#例如：调用文件 test.py 中的 my_function 函数，并传入参数 2 和 3： </span><br><br>​     <span class="hljs-keyword">from</span> test <span class="hljs-keyword">import</span> my_function  <span class="hljs-comment"># 从 test.py 中导入 my_function 函数，导入之后就可以调用相关函数了</span><br>​     result = my_function(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 调用 my_function 函数，并传入参数 2 和 3  即可获取相应的结果</span><br></code></pre></td></tr></table></figure><h2 id="函数中参数的校验"><a href="#函数中参数的校验" class="headerlink" title="函数中参数的校验"></a>函数中参数的校验</h2><p>  在定义函数时，可以对参数进行校验，如果参数不符合要求，则函数无法正常执行。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>(<span class="hljs-params">x, y</span>):  <span class="hljs-comment"># 定义函数 my_function 接收两个参数 x 和 y</span><br>​    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(y, <span class="hljs-built_in">int</span>):  <span class="hljs-comment"># 判断参数是否为整数</span><br>​      <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;参数必须为整数&quot;</span>)  <span class="hljs-comment"># 如果参数不为整数，则抛出 TypeError 异常</span><br>​    result = x + y   <span class="hljs-comment"># 计算两个数的和</span><br>​    <span class="hljs-keyword">return</span> result  <span class="hljs-comment"># 返回结果</span><br></code></pre></td></tr></table></figure><p>  调用函数时，如果传入的参数不是整数，则会抛出 TypeError 异常，导致程序崩溃。</p><p>  校验函数的入参数 isinstance()函数用来判断一个对象是否是某个类型，如果不是，则抛出TypeError异常。isinstance（）函数的第二个参数可以是多个类型，用逗号隔开。</p><p>  isinstance(object, classinfo) 第一个参数是待判断的对象，第二个参数是类型或者元组。 返回值是True或False。</p><h2 id="参数的定义"><a href="#参数的定义" class="headerlink" title="参数的定义"></a>参数的定义</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>  函数的参数可以有默认值，这样，当调用函数时，可以省略不必要的参数。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>(<span class="hljs-params">x, y=<span class="hljs-number">3</span></span>):  <span class="hljs-comment"># 定义函数 my_function 接收两个参数 x 和 y，y 的默认值为 3</span><br><br>​    result = x + y   <span class="hljs-comment"># 计算两个数的和</span><br><br>​    <span class="hljs-keyword">return</span> result  <span class="hljs-comment"># 返回结果</span><br><br>  调用函数时，可以只传入 x 参数，y 的默认值 <span class="hljs-number">3</span> 就会生效。<br><br>  也可以传入 y 参数，这样，x 的默认值就不会生效。<br><br>  例如：<br><br>  result = my_function(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)  <span class="hljs-comment"># 调用 my_function 函数，传入参数 2 和 4  即可获取相应的结果</span><br><br>  result = my_function(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 调用 my_function 函数，传入参数 2  即可获取相应的结果</span><br><br>  注意(<span class="hljs-number">1</span>)：默认参数存在的问题<br><br>  例如：<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_end</span>(<span class="hljs-params">L=[]</span>):<br><br>  L.append(<span class="hljs-string">&#x27;END&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> L<br><br>  调用 add_end() 函数，第一次调用时，L 为空列表，append() 方法添加 <span class="hljs-string">&#x27;END&#x27;</span> 到 L 中，返回 L。<br><br>  第二次调用时，L 仍然为空列表，append() 方法再次添加 <span class="hljs-string">&#x27;END&#x27;</span> 到 L 中，导致 L 变成 [<span class="hljs-string">&#x27;END&#x27;</span>, <span class="hljs-string">&#x27;END&#x27;</span>]。<br><br>  原因：默认参数 L=[] 在定义函数时，仅仅是创建了一个空列表，并没有将它作为参数传入。<br><br>  Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。<br><br>  解决方法：<br><br>  在定义函数时，如果要使用默认参数，则必须保证默认参数指向的对象不变，不能再次赋值。<br><br>  例如：<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_end</span>(<span class="hljs-params">L=<span class="hljs-literal">None</span></span>):<br><br>​    <span class="hljs-keyword">if</span> L <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br><br>​      L = []<br><br>​    L.append(<span class="hljs-string">&#x27;END&#x27;</span>)<br><br>​    <span class="hljs-keyword">return</span> L<br><br>  调用 add_end() 函数，第一次调用时，L 为 <span class="hljs-literal">None</span>，append() 方法添加 <span class="hljs-string">&#x27;END&#x27;</span> 到 L 中，返回 L。<br><br>  注意(<span class="hljs-number">2</span>)：默认参数使用注意事项<br><br>  定义函数时，如果有多个参数有默认值，则需要把变化大的参数放到前面，变化小的参数放到后面。<br><br>  例：<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>(<span class="hljs-params">x, y, z=<span class="hljs-string">&#x27;姓名&#x27;</span>,f = <span class="hljs-string">&#x27;nianling&#x27;</span></span>):  <span class="hljs-comment"># 定义函数 my_function 接收四个接收参数 x,y,z,f，z 的默认值为 &#x27;姓名&#x27;，f 的默认值为 &#x27;nianling&#x27;</span><br><br>  使用上面的函数时可以是： my_function(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>)  <span class="hljs-comment"># 调用 my_function 函数，传入参数 2,4,&#x27;张三&#x27;,&#x27;男&#x27;  即可获取相应的结果</span><br><br>  my_function(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)  <span class="hljs-comment"># 调用 my_function 函数，传入参数 2,4  即可获取相应的结果</span><br><br>  my_function(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 调用 my_function 函数，传入参数 2  即可获取相应的结果</span><br><br>  my_function(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>) <span class="hljs-comment"># 代表前3个参数使用上送的，f使用默认值</span><br><br>  my_function(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, f=<span class="hljs-string">&#x27;张三&#x27;</span>)  <span class="hljs-comment"># 调用 my_function 函数，传入参数 2,4,f=&#x27;张三&#x27;  即可获取相应的结果 # 代表前3个参数使用上送的，z使用默认值</span><br></code></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>  函数的参数个数不确定，可以使用可变参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">例如： 上送的参数是 元组 或 列表<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">numbers</span>):<br><br>​    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>​    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numbers:<br><br>​      <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + n * n<br><br>​    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br>  或者<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">*numbers</span>):<br><br>​    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>​    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numbers:<br><br>​      <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + n * n<br><br>​    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br>  调用函数时，可以传入 元组 或 列表<br><br>  result = calc(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 调用 calc 函数，传入参数 1,2,3,4,5  即可获取相应的结果</span><br><br>  result = calc([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])  <span class="hljs-comment"># 调用 calc 函数，传入参数 [1, 2, 3, 4, 5]  即可获取相应的结果</span><br></code></pre></td></tr></table></figure><h3 id="可变参数-1"><a href="#可变参数-1" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-keyword">def</span> <span class="hljs-title function_">testChangeArges</span>(<span class="hljs-params">*info</span>):<br>​    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> info:<br>​      <span class="hljs-built_in">print</span>(i)<br>  testChangeArges(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>  nums = [<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>]<br><br>  \<span class="hljs-comment">#list转可变参数 然后进行调用使用</span><br><br>  testChangeArges(*nums)<br></code></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>  解释：</p><p>  关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testKwargs</span>(<span class="hljs-params">name,age,**kwargs</span>):<br><br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name:&quot;</span>,name) <span class="hljs-comment">#必选参数</span><br><br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;age:&quot;</span>,age) <span class="hljs-comment">#必选参数</span><br><br>​    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> kwa9rgs.items():<br><br>​      <span class="hljs-built_in">print</span>(k,v) <span class="hljs-comment">#可选参数</span><br><br><br><br>  testKwargs(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,city=<span class="hljs-string">&quot;上海&quot;</span>,job=<span class="hljs-string">&quot;学生&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h3><p>  解释：</p><p>  命名关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">def</span> <span class="hljs-title function_">testNameKwargs</span>(<span class="hljs-params">name,age,*,city,job</span>):<br><br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name:&quot;</span>,name) <span class="hljs-comment">#必选参数</span><br><br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;age:&quot;</span>,age) <span class="hljs-comment">#必选参数</span><br><br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;city:&quot;</span>,city) <span class="hljs-comment">#命名关键字参数 获取指定参数名的值</span><br><br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;job:&quot;</span>,job) <span class="hljs-comment">#命名关键字参数</span><br></code></pre></td></tr></table></figure><h3 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h3><p>  位置参数、可变参数、关键字参数、命名关键字参数可以组合使用。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-keyword">def</span> <span class="hljs-title function_">testArgs</span>(<span class="hljs-params">*args, **kwargs</span>):<br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;args:&quot;</span>,args) <span class="hljs-comment">#可变参数</span><br>​    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> kwargs.items():<br>​      <span class="hljs-built_in">print</span>(k,v) <span class="hljs-comment">#关键字参数</span><br>  testArgs(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,name=<span class="hljs-string">&quot;张三&quot;</span>,age=<span class="hljs-number">20</span>,city=<span class="hljs-string">&quot;上海&quot;</span>,job=<span class="hljs-string">&quot;学生&quot;</span>)<br>  输出结果为：<br>​        args: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>​        name 张三<br>​        age <span class="hljs-number">20</span><br>​        city 上海<br>​        job 学生<br></code></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>  递归函数是指在函数内部调用自身的函数。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>​    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>​      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>​    <span class="hljs-keyword">else</span>:<br>​      <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>  调用函数 factorial(5) 得到结果 120。</p><p>  递归函数的优点是逻辑简单，缺点是效率低，容易发生栈溢出错误。</p><p>  解决递归函数效率低的问题，可以用尾递归优化。尾递归是指在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。</p><p>  例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>​    <span class="hljs-keyword">return</span> factorial_iter(n, <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial_iter</span>(<span class="hljs-params">num, product</span>):<br>​    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:<br>​      <span class="hljs-keyword">return</span> product<br>​    <span class="hljs-keyword">else</span>:<br>​      <span class="hljs-keyword">return</span> factorial_iter(num-<span class="hljs-number">1</span>, num*product)<br>  调用函数 factorial(<span class="hljs-number">5</span>) 得到结果 <span class="hljs-number">120</span>。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的基础知识01</title>
    <link href="/2025/02/26/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/"/>
    <url>/2025/02/26/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/</url>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>‘’’<br>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。<br>等号（&#x3D;）用来给变量赋值。<br>等号（&#x3D;）运算符左边是一个变量名,等号（&#x3D;）运算符右边是存储在变量中的值。</p><p>Python 中有六个标准的数据类型：</p><ol><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ol><p>Python3 的六个标准数据类型中：<br>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p><p>Number（数字）<br>Python3 支持 int、float、bool、complex（复数）。</p><p>​    int（整数）<br>​    Python3 中的整数类型 int 可以表示任意大小的整数，可以用十进制、八进制、十六进制表示。</p><p>​    float（浮点数）<br>​    Python3 中的浮点数类型 float 可以表示小数。</p><p>​    bool（布尔值）<br>​    Python3 中的布尔值类型 bool 可以表示 True 或 False。</p><p>​    complex（复数）<br>​    Python3 中的复数类型 complex 可以表示复数，可以用 a + bj、a + bj、a + bj 的形式表示。</p><p>String（字符串）<br>Python3 中的字符串类型 str 可以表示任意文本，可以用单引号或双引号括起来的任意文本。</p><p>List（列表）<br>Python3 中的列表类型 list 可以表示一个有序的元素序列，可以用方括号 [] 或者 list() 函数创建。</p><p>Tuple（元组）<br>Python3 中的元组类型 tuple 可以表示一个有序可重复的元素序列，但是tuple一旦初始化就不能修改，可以用圆括号 () 或者 tuple() 函数创建。</p><p>Set（集合）<br>Python3 中的集合类型 set 可以表示一个无序的元素序列 唯一且无序，可以用花括号 {} 或者 set() 函数创建。</p><p>Dictionary（字典）<br>Python3 中的字典类型 dict 可以表示一个键值对的集合，可以用花括号 {} 或者 dict() 函数创建。</p><p>Python3 中的数据类型转换<br>Python3 中的数据类型转换可以使用 int()、float()、str() 等函数进行转换。</p><p>例如：</p><pre><code class="python">a = 10      # 整数b = 2.5     # 浮点数c = True    # 布尔值d = &#39;hello&#39;  # 字符串e = [1, 2, 3]  # 列表  类似java中的ArrayList   元素类型可以不同f = (4, 5, 6)  # 元组   类似java中的数组   元素类型不统一，可通过下标获取  f[0] = 4g = &#123;1, 2, 3&#125;  # 集合   相当于java中的seth = &#123;&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 25&#125;  # 字典   相当于java中的map print(int(a))  # 输出结果为：10print(float(b))  # 输出结果为：2.5print(str(c))  # 输出结果为：&#39;True&#39;print(list(e))  # 输出结果为：[1, 2, 3] print(tuple(f))  # 输出结果为：(4, 5, 6)print(set(g))  # 输出结果为：&#123;1, 2, 3&#125;print(dict(h))  # 输出结果为：&#123;&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 25&#125;&#39;&#39;&#39;#--------------------------------------------------------判断和循环----------------------------------------&#39;&#39;&#39;# 判断# if 条件:#     语句块# elif 条件:#     语句块# else:#     语句块nage = input(&quot;请输入你的年龄：&quot;)# 将字符串类型转为数字类型age = int(nage)if age &lt; 18:    print(&quot;您还未成年，不能抽烟！&quot;)elif age &gt;= 18 and age &lt;=60:    print(&quot;吸烟有害建康，请有节制的抽烟！&quot;)else:    print(&quot;您已经老了，不能抽烟！&quot;)# 循环# for 变量 in 序列:#     语句块# 1. 打印下面名字names = [&#39;张二&#39;, &#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;赵六&#39;]for name in names:    print(&quot;名字：&quot; + name)# 2. 计算1-10之间的和sum = 0for i in [1,2,3,4,5,6,7,8,9,10]:    sum += iprint(&quot;1-10之间的和为：&quot; + str(sum))# 3: python中 range()函数的用法 range(start, stop, step) start: 起始值 stop: 结束值 step: 步长  例如 range(1, 10, 2) 表示从1到10，步长为2sum2 = 0for i in range(0,100):    sum2 += iprint(&quot;结果如下：&quot; + str(sum2))# 循环# whilen = 10while n &lt; 20:    n = n + 1print(&quot;while的输出结果为：&quot; + str(n))#break 的使用 提前结束循环t = 10while t &gt; 0:    if t &lt; 4:        break    t = t -1    print(&quot;break循环结果：&quot; + str(t))#continue 的使用结束本次循环#在使用continue的时候需要注意结束这次循环的时候需要进行一下数据的处理，不然变量没有变化会死循环tt = 10while tt &gt; 0:    if tt == 4:        tt = tt -1        continue    tt = tt -1    print(&quot;continue循环结果：&quot; + str(tt))# + 号的使用 + 号可以用来拼接字符串、列表、元组数据类型# 字符串拼接str1 = &quot;hello&quot;str2 = &quot;world&quot;str3 = str1 + &quot; &quot; + str2print(str3)# * 号的使用 * 号可以用来重复字符串、列表、元组数据类型# 字符串重复str4 = &quot;hello&quot; * 3print(str4) # 输出结果为：hellohellohellotuple() 函数的使用 的作用 ： 用来将序列转换为元组list() 函数的使用 的作用 ： 用来将序列转换为列表set() 函数的使用 的作用 ： 用来将序列转换为集合del() 语句的使用 的作用 ： 删除变量len() 函数的使用 的作用 ： 计算序列的长度max() 函数的使用 的作用 ： 计算序列中的最大值min() 函数的使用 的作用 ： 计算序列中的最小值sorted() 函数的使用 的作用 ： 对序列进行排序sorted示例： sorted([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) 输出结果为：[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]进行降序输出：sorted(需要排序的列表，reverse=True)   reverse 代表降序输出。&#39;&#39;&#39;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/02/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/02/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/26/hello-world/"/>
    <url>/2025/02/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
